cookie
클라이어트 웹브라우저에 저장되는 정보


cookie-parser 모듈
요청된 쿠키를 쉽게 사용할 수 있도록 도와주는 모듈입니다. 

cookieParser() : 일반 쿠키를 사용하는 경우
cookieParser('암호화하기 위한 문자') : 암호화된 쿠키를 사용하는 경우


[쿠키 설정하기]

res.cookie('키', '값', {
          쿠키 생성 옵션(객체형으로 옵션을 추가함)
})

쿠키 생성 옵션
maxAge : 만료시간을 밀리초 단위로 설정합니다.
expires : 만료 시간을 GMT 시간으로 설정합니다.
path ; cookie의 경로를 설정합니다. 기본 설정은 "/" 입니다.


[쿠키 조회하기]
req.cookies.cookie키  : 일반 쿠키
req.signedCookies.cookie키 : 암호화된 쿠키 (사인더쿠키스)

쿠키 삭제하기
res.clearCookie('키', {path: '경로'});




express-session 모듈
express에서 세션을 관리하기 위해 사용하는 미들웨어 모듈입니다.

app.use(session({세션모듈의 옵션}));

세션 모듈의 옵션
secret : 쿠키를 임의로 변조하는 것을 방지하기 위한 값입니다. 이 값을 통하여 세션을 암호화하여 저장합니다.
resave : 세션을 언제나 저장할지 지정하는 값입니다. 이 값을 false로 하는 것을 권장하고 필요에 따라 true로 설정하기도 합니다.
saveUninitialized : 세션이 저장되기 전에 saveUninitialized 상태로 미리 만들어서 저장합니다.


[세션 초기 설정]
let 세션객체명 = req.session;
세션객체명.변수명 = 값;

let sess = req.session;
sess.userid = 'apple';

[세션 변수 사용]
세션객체명.변수명;
console.log(sess.userid);

[세션 삭제]
req.session.destory(() => {
    세션 삭제시 처리할 문장;
});



https://db-engines.com/en/ranking


NoSQL
Not only SQL의 약자입니다. 
기존의 RDBMS(관계형 데이터베이스)의 한계를 극복하기 위해 만들어진 새로운 형태의 데이터베이스입니다. 
관계형 DB가 아니므로 RDBMS처럼 고정된 스키마 및 JOIN문이 존재하지 않습니다. 


NoSQL을 사용하는 이유
가장 큰 이유는 성능 때문입니다.
관계형 데이터베이스는 시스템의 신뢰도를 높이는데 필요한 장치를 많이 가지고 있습니다. 
SQL문을 읽고 실행하는데 많은 리소스를 사용하며 성능이 떨어지는 경우가 많습니다. 
반대로 NoSQL은 성능을 최우선으로 생각하여 실시간으로 처리해야 할 경우나 대용량 트래픽을 감당할 수 있는 
메시징 시스템등에 활용됩니다.



mongoDB 다운로드
https://www.mongodb.com/

mongDB 환경변수 등록
시스템 -> 고급 시스템 설정 -> 환경변수 -> 시스템 변수(path) 편집 -> 새로만들기 ->아래 경로 등록
C:\Program Files\MongoDB\Server\5.0\bin

mongoDB 특징
- NoSQL이기 때문에 관계형 데이터베이스의 테이블 개념이 없습니다.
- 데이터가 모인 하나의 단위를 컬렉션이라고 부릅니다.
- 데이터를 정해 놓은 컬럼의 형태로 컬렉션에 넣어야 한다는 제약이 없습니다.
- mongoDB의 데이터베이스는 컬렉션의 집합이라고 할 수 있습니다.
- 컬렉션은 여러개의 문서 객체를 가질 수 있습니다. 문서 객체는 속성들의 집합으로서 한 사람의 이름과 나이등을 저장하고 있는 하나의 문서 객체를 만든 후 그 안에 자바스크립트 객체와 같이 속성들을 추가하여 저장할 수 있습니다.


데이터
{"id":1, "userid":"apple", "userpw":"1111" ..} -> document
document가 -> collection -> database